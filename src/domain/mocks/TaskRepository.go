// Code generated by mockery 2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/isaias-dgr/todo/src/domain"
	mock "github.com/stretchr/testify/mock"
)

// TaskRepository is an autogenerated mock type for the TaskRepository type
type TaskRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, uuid
func (_m *TaskRepository) Delete(ctx context.Context, uuid string) error {
	ret := _m.Called(ctx, uuid)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Fetch provides a mock function with given fields: ctx, f
func (_m *TaskRepository) Fetch(ctx context.Context, f *domain.Filter) (*domain.Tasks, error) {
	ret := _m.Called(ctx, f)

	var r0 *domain.Tasks
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Filter) *domain.Tasks); ok {
		r0 = rf(ctx, f)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Tasks)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Filter) error); ok {
		r1 = rf(ctx, f)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, uuid
func (_m *TaskRepository) GetByID(ctx context.Context, uuid string) (*domain.Task, error) {
	ret := _m.Called(ctx, uuid)

	var r0 *domain.Task
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Task); ok {
		r0 = rf(ctx, uuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: ctx, t
func (_m *TaskRepository) Insert(ctx context.Context, t *domain.Task) error {
	ret := _m.Called(ctx, t)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Task) error); ok {
		r0 = rf(ctx, t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, uuid, t
func (_m *TaskRepository) Update(ctx context.Context, uuid string, t *domain.Task) error {
	ret := _m.Called(ctx, uuid, t)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.Task) error); ok {
		r0 = rf(ctx, uuid, t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
